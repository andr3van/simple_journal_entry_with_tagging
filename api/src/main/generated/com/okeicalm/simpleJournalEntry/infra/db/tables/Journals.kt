/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.infra.db.tables


import com.okeicalm.simpleJournalEntry.infra.db.SimpleJournalEntryDb
import com.okeicalm.simpleJournalEntry.infra.db.keys.JOURNAL_ENTRIES_IBFK_1
import com.okeicalm.simpleJournalEntry.infra.db.keys.KEY_JOURNALS_PRIMARY
import com.okeicalm.simpleJournalEntry.infra.db.tables.JournalEntries.JournalEntriesPath
import com.okeicalm.simpleJournalEntry.infra.db.tables.records.JournalsRecord

import java.time.LocalDate

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Journals(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JournalsRecord>?,
    parentPath: InverseForeignKey<out Record, JournalsRecord>?,
    aliased: Table<JournalsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JournalsRecord>(
    alias,
    SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>simple_journal_entry_db.journals</code>
         */
        val JOURNALS: Journals = Journals()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JournalsRecord> = JournalsRecord::class.java

    /**
     * The column <code>simple_journal_entry_db.journals.id</code>.
     */
    val ID: TableField<JournalsRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>simple_journal_entry_db.journals.incurred_on</code>.
     */
    val INCURRED_ON: TableField<JournalsRecord, LocalDate?> = createField(DSL.name("incurred_on"), SQLDataType.LOCALDATE.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JournalsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JournalsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JournalsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>simple_journal_entry_db.journals</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>simple_journal_entry_db.journals</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>simple_journal_entry_db.journals</code> table reference
     */
    constructor(): this(DSL.name("journals"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JournalsRecord>?, parentPath: InverseForeignKey<out Record, JournalsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, JOURNALS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JournalsPath : Journals, Path<JournalsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JournalsRecord>?, parentPath: InverseForeignKey<out Record, JournalsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JournalsRecord>): super(alias, aliased)
        override fun `as`(alias: String): JournalsPath = JournalsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JournalsPath = JournalsPath(alias, this)
        override fun `as`(alias: Table<*>): JournalsPath = JournalsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB
    override fun getIdentity(): Identity<JournalsRecord, Long?> = super.getIdentity() as Identity<JournalsRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<JournalsRecord> = KEY_JOURNALS_PRIMARY

    private lateinit var _journalEntries: JournalEntriesPath

    /**
     * Get the implicit to-many join path to the
     * <code>simple_journal_entry_db.journal_entries</code> table
     */
    fun journalEntries(): JournalEntriesPath {
        if (!this::_journalEntries.isInitialized)
            _journalEntries = JournalEntriesPath(this, null, JOURNAL_ENTRIES_IBFK_1.inverseKey)

        return _journalEntries;
    }

    val journalEntries: JournalEntriesPath
        get(): JournalEntriesPath = journalEntries()
    override fun `as`(alias: String): Journals = Journals(DSL.name(alias), this)
    override fun `as`(alias: Name): Journals = Journals(alias, this)
    override fun `as`(alias: Table<*>): Journals = Journals(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Journals = Journals(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Journals = Journals(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Journals = Journals(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Journals = Journals(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Journals = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Journals = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Journals = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Journals = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Journals = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Journals = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Journals = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Journals = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Journals = where(DSL.notExists(select))
}
