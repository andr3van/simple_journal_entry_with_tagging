/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.infra.db.tables.records


import com.okeicalm.simpleJournalEntry.infra.db.tables.JournalEntries

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JournalEntriesRecord() : UpdatableRecordImpl<JournalEntriesRecord>(JournalEntries.JOURNAL_ENTRIES) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var journalId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var side: Byte?
        set(value): Unit = set(2, value)
        get(): Byte? = get(2) as Byte?

    open var accountId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var value: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised JournalEntriesRecord
     */
    constructor(id: Long? = null, journalId: Long? = null, side: Byte? = null, accountId: Long? = null, value: Int? = null): this() {
        this.id = id
        this.journalId = journalId
        this.side = side
        this.accountId = accountId
        this.value = value
        resetChangedOnNotNull()
    }
}
